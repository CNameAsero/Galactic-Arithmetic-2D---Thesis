[gd_scene load_steps=5 format=3 uid="uid://xetwb531wu41"]

[ext_resource type="Texture2D" uid="uid://du3rous1vyhcv" path="res://Sprites/Enemies/world3_enemies/Arrow.png" id="1_cwe48"]

[sub_resource type="GDScript" id="GDScript_ptdjx"]
script/source = "extends Area2D

var direction : Vector2 = Vector2.RIGHT
@export var speed : float = 300

@onready var health_system = $\"../health_system\"
@onready var sprite1 = $\"../slime_player_joystick/slime_player_joystik/Sprite2D\"
func _ready():
	await get_tree().create_timer(3).timeout
	sprite1.visible = true
	sprite1.modulate = Color(1, 1, 1, 1)
	queue_free()

func _physics_process(delta):
	position += direction * speed * delta

func player_hurt():
	health_system._health -= 1
	AudioManager.player_hurt()
	var blink_duration = 0.05
	var total_blink_time = 0.5
	var sprite = $\"../slime_player_joystick/slime_player_joystik/Sprite2D\"
	
	sprite.modulate = Color(1, 1, 1, 0.5)
	
	for i in range(int(total_blink_time / blink_duration)):
		sprite.visible = !sprite.visible
		await get_tree().create_timer(blink_duration).timeout
	
	sprite.visible = true
	sprite.modulate = Color(1, 1, 1, 1)
func _on_body_entered(body):
	if body.is_in_group(\"player\"):
		$Sprite2D.num + 1
		player_hurt()
"

[sub_resource type="GDScript" id="GDScript_010ny"]
script/source = "extends Sprite2D

@onready var  num = 0

# Called when the node enters the scene tree for the first time.
func _ready():
	pass # Replace with function body.


# Called every frame. 'delta' is the elapsed time since the previous frame.
func _process(_delta):
	checknum()


func checknum():
	if num == 1:
		queue_free()
"

[sub_resource type="RectangleShape2D" id="RectangleShape2D_skejf"]
size = Vector2(22, 2)

[node name="skeleton_arrow" type="Area2D"]
script = SubResource("GDScript_ptdjx")

[node name="Sprite2D" type="Sprite2D" parent="."]
scale = Vector2(0.5, 0.5)
texture = ExtResource("1_cwe48")
script = SubResource("GDScript_010ny")

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
shape = SubResource("RectangleShape2D_skejf")

[connection signal="body_entered" from="." to="." method="_on_body_entered"]
